/* 	*	This script is free software: you can redistribute it and/or modify*   it under the terms of the GNU General Public License as published by*   the Free Software Foundation, either version 3 of the License, or*   (at your option) any later version.**   This program is distributed in the hope that it will be useful,*   but WITHOUT ANY WARRANTY; without even the implied warranty of*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*   GNU General Public License for more details.**   You should have received a copy of the GNU General Public License*   along with this program.  If not, see <http://www.gnu.org/licenses/>.**/package com.ayanray.utils {		import flash.display.Stage;	import flash.events.Event;	import flash.utils.getTimer;		/**	 * MonitorFrameRate is a class used to accurately measure the frame rate at runtime.	 * <br /><br />	 * Example Usage:<br />	 * MonitorFrameRate.init(this.stage); // init the frame rate listener	 * <br />	 * <br />	 * // Now whenever you want to check the frame rate, simple access these variables:	 * trace(MonitorFrameRate.fps, MonitorFrameRate.lag);	 * <br />	 * <br />	 * To shutdown the MonitorFrameRate Class, call: <br />	 * MonitorFrameRate.shutdown();	 * <br />	 * Last Updated: October 25th, 2007	 * <br />	 * Copyright (c) 2007 Ayan Ray	 */	final public class MonitorFrameRate	{		/**		*	@param	fps						Actual frames per second		*	@param	lag						Percentage of fps decrease		*/				public static var fps 				:Number;		public static var lag				:Number;				private static var _stage			:Stage;		private static var time 			:Number;		private static var frameTime 		:Number;		private static var prevFrameTime 	:Number = getTimer();		private static var secondTime 		:Number;		private static var prevSecondTime 	:Number = getTimer();		private static var frames 			:Number = 0;				/**		 * Monitor Frame Rate is not a instantiable class, so please don't try ;)		 */		public function MonitorFrameRate() :void		{			trace("This utility tool is not meant to be instantiated");		}		/**		 * Initializes the frame rate monitor		 * 		 * @param	_xstage	You must pass a reference to the stage so it can add the EnterFrame Listener		 */		public static function init( _xstage:Stage ) :void		{			_stage = _xstage;			_stage.addEventListener( Event.ENTER_FRAME, monitorFrameRate );		}		/**		 * Called each frame to accurately measure the frame rate		 * 		 * @param	e Frame Event		 */		private static function monitorFrameRate( e:Event ) :void		{			// Monitor Frame Rate			time = getTimer();			frameTime = time - prevFrameTime;			secondTime = time - prevSecondTime;			prevFrameTime = time;						if(secondTime >= 1000) 			{				fps = frames;				frames = 0;				prevSecondTime = time;			} 			else 			{					frames++;				}						lag = Math.round(_stage.frameRate - fps/_stage.frameRate)/100;		}		/**		 * To shutdown the MonitorFrameRate class, call this function to remove the event listener.		 */		public static function shutdown() :void		{			if(_stage.hasEventListener( Event.ENTER_FRAME )) _stage.removeEventListener( Event.ENTER_FRAME, monitorFrameRate );		}	}}